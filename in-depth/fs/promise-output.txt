CONST { 
  READFILE, 
  READFILESYNC,
  WRITEFILE,
  WRITEFILESYNC 
} = REQUIRE('FS');
CONST { 
  READFILE: RFP, 
  WRITEFILE: WFP 
} = REQUIRE('FS').PROMISES;

CONST { JOIN } =REQUIRE('PATH');
/*
  SYNCHRONOUS METHODS
  - BLOCK THE THREAD UNTIL FINISHED
  - MAY BE CONVENIENT FOR APP-LOADING PROCESSES
  - ERRORS THROW, SO THIS STUFF NEEDS TO BE WRAPPED IN TRY/CATCH TO HANDLE ERRORS
*/
/*
  READ CURRENT FILE && LOG THE RESULTS
  LOGS A BUFFER
  <BUFFER ....>
*/ 
CONST BUFFERED_CONTENT = READFILESYNC(__FILENAME);
CONSOLE.LOG({BUFFERED_CONTENT})

/*
  READ CURRENT FILE && LOG THE RESULTS
  LOGS THE READABLE CONTENT AS STRINGS WITH BREAKS ETC
*/ 
CONST ENCODED_CONTENT = READFILESYNC(__FILENAME, {ENCODING: 'UTF8'});
CONSOLE.LOG({ENCODED_CONTENT})

/*
  WRITE TO A NEW FILE, TAKES 3 PARAMS HERE
  - THE FILE PATH
  - THE FILE NAME
  - THE FILE CONTENT
*/ 
CONST OUTPUT_FILE_NAME = 'OUTPUT.TXT'
WRITEFILESYNC(JOIN(__DIRNAME,OUTPUT_FILE_NAME), ENCODED_CONTENT.TOUPPERCASE());

// THE 'A' FLAG ADDS IF THE FILE ALREADY HAS CONTENT
// 'APPEND' MODE
WRITEFILESYNC(JOIN(__DIRNAME,OUTPUT_FILE_NAME), ENCODED_CONTENT.TOUPPERCASE(), {
  FLAG: 'A'
})

// SEE ALL FS FLAGS
// HTTPS://NODEJS.ORG/DIST/LATEST-V14.X/DOCS/API/FS.HTML#FS_FILE_SYSTEM_FLAGS


/*
  ASYNC + CALLBACKS
*/
// READING A FILE
FUNCTION DOWHENREADISDONE(ERR, CONTENTS){
  (ERR, CONTENTS) => {
    IF (ERR) { 
      CONSOLE.ERROR(ERR)
      RETURN
    }
    CONSOLE.LOG('DOWHENREADISDONE CONTENTS')
    CONSOLE.LOG(CONTENTS)
  }
}
READFILE(__FILENAME, {ENCODING: 'UTF8'}, DOWHENREADISDONE)


// WRITING A 'TRANSFORMED' VERSION TO AN OUTPUT FILE
FUNCTION WRITEONSUCCESS(ERR,CONTENTS){
  IF (ERR) { 
    CONSOLE.ERROR(ERR)
    RETURN
  }
  CONST OUT = JOIN(__DIRNAME, 'OUT-ON-SUCCESS.TXT')
  WRITEFILE(OUT, CONTENTS.TOUPPERCASE(), (ERR) => {
    IF (ERR) { CONSOLE.ERROR(ERR) }
  })
}

READFILE(__FILENAME, {ENCODING: 'UTF8'}, WRITEONSUCCESS)



/*
  PROMISES
*/ 
ASYNC FUNCTION ASYNCRUNNER(){
  CONST FILECONTENT = AWAIT RFP(__FILENAME, {ENCODING: 'UTF8'});
  CONST OUTFILE = JOIN(__DIRNAME, 'PROMISE-OUTPUT.TXT');
  AWAIT WFP(OUTFILE, FILECONTENT.TOUPPERCASE())
}
ASYNCRUNNER().CATCH(CONSOLE.ERROR)