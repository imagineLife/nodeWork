NODE IS built on V8

MACHINE CODE - computers understand 'machine code', looks more like 010101111100 than 'high level' languages.

Interpreters
	compiling + executing

Compilers
	-take source code & turn into 'machine code'
	-create executables

Transpilers
	convert code types

V8
	a javascript engine.
	interprets JS.
	compiles it. optimizes it at run time.

OTHER JS ENGINES
	JavascriptCore (ios,Safari)
	SpiderMonkey(Firefox)
	Chakra(IE)

Browsers take js files & pass them to engines to run

Node looks @ js files, passes to an 'embedded' JS engine to be executed


Node is a C++ application
Node is 2 primary apps
- a script processor.
	ie 'node index.js'
		opens index with node
		initializes the event loop, processes the file


Items that can be added to the event loop are tasks thaat shoudnlt nbe executed sync, 'non-blocking'.
EVERYTHING is blocking in JS development, performing in order. Incapable of executing anything else 'at the same time'.


Runtimes with blocking I/O demand perfect order. No drawback if that's the plan

WEB-APPS usually process multiple things at once - fetching, charging, searching, etc. 


Node is 'single-threaded' - -
Node schedules events for later, constantly re-prioritizing its tasks for optimal execution... doesn't wait around till other apis are done.


NODE RUNNING AN APP
- only needs an 'entry file'
- uses 'require', grabbing a resource from elsewhere

node's Script processor:
- reads in a file specified ('require "something"')
- reads in all the sub-dependencies of included file
- executes the sync tasks in those files
- begins processing the 'event loop' over and over till nothign is left
- executes event loop

REPL
Read Eval Print Loop
-like a console in a browser
-defines & executes js against the engine
- in the cmd, 'node' starts the repl













NODE && A STABILITY PROBLEM

NODE is finicky
errors kill the thread

- How to create, use & catch errors
- Use the 'debugger' to step in & out of issues
- use the 'strict' flag
- create && add a test-runner (built-in assertion library)
- add unit tests, API int. tests



NODE ERRORS
- node.js errors work like any other error, class w/ types (system, like opening a file that doesn't exist, or user-specified errors)

- MAKE A NEW ROUTE
- examples/error, to helpers.exampleError
// Error example (this is why we're wrapping the handler caller in a try catch)
handlers.exampleError = function(data,callback){
  var err = new Error('This is an example error.');
  throw(err);
};


- THIS will throw an error in the cmd line
- ...the server needs to HANDLE this error && keep the server UP! HOW?!, update the server.js file
- MOVE the chosenHandler callback into a unique function, processHandlerResponse
- update chosenHander calling to read...
	- chosenHandler(data, function(statusCode, payload, contentType){
		server.processHandlerResponse(res,method,trimmedPath,statusCode,payload,contentType)
	- wrap the new fn in a try/catch
	... catch(e)
		debug(e)
			server.processHandleResponse(res,method,trimmedPath,500, {'Error': 'An Unknown Error occured'})
	- start the app in debug mode to see more content in the terminal:
	... NODE_DEBUG=server node index.js
	... shows the error in the console
	ALSO the non-200-codes show in red text!

	})
